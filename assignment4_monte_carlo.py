# -*- coding: utf-8 -*-
"""assignment4_monte_carlo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rDJ6i-THi3pe_4iby9kZPQ8cNgVV1LmN
"""

pip install ucimlrepo

from ucimlrepo import fetch_ucirepo
import time
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from scipy import stats
import random

# fetch dataset
apartment_for_rent_classified = fetch_ucirepo(id=555)

# data (as pandas dataframes)
X = apartment_for_rent_classified.data.features
y = apartment_for_rent_classified.data.targets

# metadata
print(apartment_for_rent_classified.metadata)

# variable information
print(apartment_for_rent_classified.variables)

apartment_for_rent_classified.data.original

df_rent = apartment_for_rent_classified.data.original
df_rent = df_rent[['category', 'bathrooms', 'bedrooms', 'price_display', 'price_type', 'square_feet', 'state']]

df_rent.describe()

df_rent.category.unique()

#df_rent[df_rent['category'] == 'housing/rent/apartment']
df_rent = df_rent[(df_rent['category'] == 'housing/rent/apartment') & (df_rent['price_type'] == 'Monthly')]

df_rent = df_rent.dropna()
df_rent.head()

df_rent['price_display'] = pd.to_numeric(df_rent['price_display'], errors='coerce')
df_rent['bathrooms'] = pd.to_numeric(df_rent['bathrooms'], errors='coerce')
df_rent['bedrooms'] = pd.to_numeric(df_rent['bedrooms'], errors='coerce')
df_rent['square_feet'] = pd.to_numeric(df_rent['square_feet'], errors='coerce')

plt.hist(df_rent['price_display'], density=True)

df_rent.describe()

df_rent['price_display'].mean()

df_rent['price_display'].std()

df_rent['square_feet'].mean()

df_rent['square_feet'].std()

df_rent_state = df_rent.groupby('state')
state_prop = df_rent_state['price_display'].mean()/df_rent['price_display'].mean()
state_prop

plt.figure(figsize=(15, 10))
plt.bar(state_prop.index, state_prop)
plt.title('State Rent Prices vs Mean (Proportion)')

#state_prop[random.randrange(0,len(state_prop))]
#np.random.choice(list(state_prop), replace=True, size=1000)

stats.linregress(df_rent['square_feet'][0:50000],df_rent['price_display'][0:50000])

sns.lmplot(x='square_feet', y='price_display', data=df_rent[df_rent['state'] == 'CA'], aspect=2)
plt.title('Rent Price vs. Square Feet')
plt.show()

# Function to run the Monte Carlo simulation for a given state
def monte_carlo_simulation(num_simulations=10000):
    # Simulate rent prices and square footage
    simulated_data = np.random.normal(955.96, 365, num_simulations)
    simulated_data = (simulated_data * 1.133) + 511.65
    state_rand = np.random.choice(list(state_prop), replace=True, size=num_simulations)

    # Extract simulated rent prices
    simulated_rent_prices = simulated_data * state_rand

    return simulated_rent_prices

# Run the simulation for a specific state, e.g., 'California'
simulated_rent_prices = monte_carlo_simulation()

plt.hist(monte_carlo_simulation())
plt.title('Simulation of Rent Prices')

execution_times = []
for i in range(100):
  start_time = time.time()
  simulated_rent_prices = monte_carlo_simulation()
  end_time = time.time()
  execution_time = end_time - start_time
  execution_times.append(execution_time)

np.array(execution_times).mean()

np.array(execution_times).std()

np.array(execution_times).max()

from scipy import stats

# Given data
means = [0.00065, 0.0009, 0.0006]
std_devs = [0.00021, 0.0000, 0.00027]
n = 30  # sample size

# Simulate data
np.random.seed(0)  # for reproducibility
python_data = np.random.normal(means[0], std_devs[0], n)
go_data = np.random.normal(means[1], std_devs[1], n)
r_data = np.random.normal(means[2], std_devs[2], n)

# Perform ANOVA test
f_value, p_value = stats.f_oneway(python_data, go_data, r_data)
f_value, p_value

